// This file is autogenerated by lib/feature-plugin.js
import { expose } from 'comlink';
import { timed } from './util';
import avifDecode from './../features/decoders/avif/worker/avifDecode';
import jxlDecode from './../features/decoders/jxl/worker/jxlDecode';
import webpDecode from './../features/decoders/webp/worker/webpDecode';
import wp2Decode from './../features/decoders/wp2/worker/wp2Decode';
import avifEncode from './../features/encoders/avif/worker/avifEncode';
import jxlEncode from './../features/encoders/jxl/worker/jxlEncode';
import mozjpegEncode from './../features/encoders/mozJPEG/worker/mozjpegEncode';
import oxipngEncode from './../features/encoders/oxiPNG/worker/oxipngEncode';
import webpEncode from './../features/encoders/webP/worker/webpEncode';
import wp2Encode from './../features/encoders/wp2/worker/wp2Encode';
import rotate from './../features/preprocessors/rotate/worker/rotate';
import quantize from './../features/processors/quantize/worker/quantize';
import resize from './../features/processors/resize/worker/resize';
const exports = {
    avifDecode(...args) {
        return timed('avifDecode', () => avifDecode(...args));
    },
    jxlDecode(...args) {
        return timed('jxlDecode', () => jxlDecode(...args));
    },
    webpDecode(...args) {
        return timed('webpDecode', () => webpDecode(...args));
    },
    wp2Decode(...args) {
        return timed('wp2Decode', () => wp2Decode(...args));
    },
    avifEncode(...args) {
        return timed('avifEncode', () => avifEncode(...args));
    },
    jxlEncode(...args) {
        return timed('jxlEncode', () => jxlEncode(...args));
    },
    mozjpegEncode(...args) {
        return timed('mozjpegEncode', () => mozjpegEncode(...args));
    },
    oxipngEncode(...args) {
        return timed('oxipngEncode', () => oxipngEncode(...args));
    },
    webpEncode(...args) {
        return timed('webpEncode', () => webpEncode(...args));
    },
    wp2Encode(...args) {
        return timed('wp2Encode', () => wp2Encode(...args));
    },
    rotate(...args) {
        return timed('rotate', () => rotate(...args));
    },
    quantize(...args) {
        return timed('quantize', () => quantize(...args));
    },
    resize(...args) {
        return timed('resize', () => resize(...args));
    },
};
// 'as any' to work around the way our client code has insight into worker code
expose(exports, self);
